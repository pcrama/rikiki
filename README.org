#+TITLE: Rikiki Card Game Web Application
#+AUTHOR: Philippe Crama

* Introduction
Rikiki is a card game I played as a child.  This web application must allow to
play together over the internet.

* Running on repl.it

1. Click here: [[https://repl.it/github/pcrama/rikiki][https://repl.it/badge/github/pcrama/rikiki.svg]]
2. Your browser should go to an URL similar to this:
   ~https://repl.it/repls/CaringAgitatedParticle~ (~CaringAgitatedParticle~ is
   a random string)
3. Wait a bit until the button ~run ▶~ is available and click it (it should change to ~stop ⏹~).
4. Wait a bit more until you see a small web page in the top right corner saying ~Rikiki - Page Not Found~.
5. Copy paste the URL above ~Rikiki - Page Not Found~, e.g. ~https://CaringAgitatedParticle--five-nine.repl.co~ into a new browser tab.
6. In the bottom right window of the first tab, select the ~Organizer URL~ (e.g. ~/organizer/D3CA61E91083E16D36BE28C8C78D2081/setup/game/~) *with your mouse* and copy it *using your right mouse button*, *NOT* Ctrl-C.
7. Paste the Organizer URL at the end of the location bar of the second tab (it must look like ~https://caringagitatedparticle--five-nine.repl.co/organizer/D3CA61E91083E16D36BE28C8C78D2081/setup/game/~) and hit Enter.
8. You should get a page with an empty text box: enter all players (one per line) you wish to invite.
9. Click Submit.
10. Your page should update to show the ~Wait for users~ display.
11. Update the location to use ~https~: insert ~https://~, this should update all players' links to use ~https~, too.  As a bonus, it also enables copying a player URL simply by clicking on it.  Click on the name to copy the full line instead of only the URL.
12. You can distribute these links to the players.  As they confirm their participation, their name will turn green and get a ✔ in front.  Be aware that the link of those players is updated to show the secret link that will display their cards.  Only share the `green' link with the player him/herself.  Should a Player lose her link during the game, the safest alternative is to share the ~/player/restore/link/~ with them: it uses a cookie on the Player's browser to identify the Player and reset the secret.
13. Once all (enough) players have joined, click ~Start Game~.
14. The page updates to show the game status while the players play.  At the very end of the game, the button ~Start new game with same players~ will allow to restart the game without having the players registering again.

* Stories
** User types
There is one organizer: he sends out an invitation to the players (the
organizer may be a player, too).  Once all players have accepted the
invitation by clicking the link, the organizer starts the game.  The cards are
dealt and the game proceeds.

** As the organizer, I want to generate a different invitation link for each player
- The organizer provides a list of names.
- The invitations are shared over a different channel (outside the
  scope of this application).
- The invitations must be difficult to guess.
- The organizer may be a player, but the player and organizer pages are
  separate.

** As a player, I want to accept an invitation link to register in the game
- Clicking an invitation link, the player sees his name prefilled but
  may edit it before confirming/joining.
- Once joined, the player can observe the other players joining the
  game.  The player has no cards yet.

** As the organizer, I want to start the game
- The organizer
  1. Selects how many cards to deal (prefilled with max amount of
     cards available per player, then decreasing by 1 after each
     round),
  2. clicks a button to start the game once all players are
     connected.
- Once the game is started, no more players can connect to the game.
- A player leaving the game is outside the scope of this application.
- The cards are dealt to all players according to the rules of the
  game:
  - During the first round, the maximum number of cards available is
    dealt (e.g. 7 cards for 7 players).  There is no trump for this
    round.
  - Each following round is played with one card less (e.g. 6 cards
    for the second round with 7 players) and a trump card (the first
    card from the deck that was not dealt).
  - Once the round with 1 card per player has been played, rounds
    continue counting up until the maximum number of cards is reached
    again.
  - For the last round with the maximum available number of cards per
    player, there is no trump (like the first round).
- All players can see only their cards and the trump colour.

** As a player, I want to bid when it's my turn
- Each player sees the previous player's bids when they are confirmed.
- Each player can confirm his bid only when the previous players have
  confirmed.

** As a player, I want to play a card
- All players must confirm their bid before the first card is played.
- A player may only play a card when it is his turn.
- It is not possible to take back a card.
- Once every player has put down one card, the winner gets the trick.
- The round ends when all cards have been played.
- Scoring is outside the scope of this application.

** As a player, I want to start the next round
- Once all players have put their last card down, each gets a button
  to proceed to the next round.
- This is an explicit step so the players can see the last trick and
  the results before moving on.
- Races (2 players or more clicking the "start new round" button at
  the same time) are resolved by silently ignoring the presses when
  the round is still in bidding state.

** As an organizer, I want to start a new game
- This 'kills' the previously running game.
- It is OK for the organizer to enter the player names again.

** As a player, I want to reset my link
The player's hand is displayed in a page protected by a secret that is
stored in the query parameters.  If that page is lost, the player
loses access to the game and the game cannot proceed.

There should be 1! common URL for all players (easier to share for the
organizer) where each player can reset their secret id to recover
their dashboard.

The app sets a cookie (valid for 2h) for each player.  There will be
limited CSRF protection (based on a secret generated for the game and
a 'Lax' samesite cookie policy).  Each player will be able to access
only her reset page based on her cookie.

The advantage of having only the player reset page using the cookie is
that it is easier for the automated tests to run in 1! selenium
session where each Player is identified by the link and can coexist
with other Players in other browser tabs.

* Implementation
** Hosting
- Probably on repl.it, with settings similar to these and a link to
  https://repl.it/github/pcrama/rikiki for a repl.it badge.
  #+BEGIN_EXAMPLE
    language = "python3"
    run = "FLASK_APP=flaskr FLASK_ENV=production python3 -m flask run --port 3000 --host 0.0.0.0"
  #+END_EXAMPLE
- No database, all data is in memory.
- Running locally for testing: ~python -m flask run --port 8080~.

** i18n
Following the information [[https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xiii-i18n-and-l10n][here]].
*** Extract all texts to translate
#+BEGIN_SRC shell :exports code
  cd app
  pybabel extract -F babel.cfg -k _l -o messages.pot .
#+END_SRC

~messages.pot~ may be ignored in version control.
*** Translating
1. Generate skeleton file:
   #+BEGIN_SRC shell :exports code
     for lang in fr ; do \
       pybabel $( \
                 if [ -r translations/$lang/LC_MESSAGES/messages.po ] ; \
                 then echo update ; \
                 else echo init ; fi) \
               -i messages.pot \
               -d translations \
               -l $lang ; \
     done
   #+END_SRC
2. Translate the strings in
   ~app/translations/$lang/LC_MESSAGES/messages.po~.
3. Compile to a more compact/efficient representation:
   #+BEGIN_SRC shell :exports code
     pybabel compile -d translations
   #+END_SRC

** Security
- No logins, the security is based on hard to guess links to set a
  session cookie.
- There is 1! organizer and 1! game.
** Classes
*** Models
**** Game
The Game is responsible for
- handling the confirming of the players,
- sequencing the Rounds: in Rikiki, the number of cards
  dealt is reduced by 1 at each step.

#+BEGIN_SRC plantuml :file doc/models_game_sequence_diagram.png
  actor Organizer as O
  actor "P 1" as A1
  actor "P 2" as A2
  actor "P 3" as A3
  actor "P 4" as A4
  actor "P 5" as A5
  participant Game as G
  participant "Player1" as P1
  participant "Player2" as P2
  participant "Player3" as P3
  participant "Player4" as P4
  participant "Player5" as P5
  participant "Round 1" as R1
  participant "Round 2" as R2
  G --> P1 : _~_init~_~_
  G --> P2 : _~_init~_~_
  A1 --> P1 : confirm
  A2 --> P2 : confirm
  A4 --> P4 : confirm
  A5 --> P5 : confirm
  O --> G : start_game
  G --> R1 : _~_init~_~_([P1, P2, P4, P5], 13)
  ... play one Round with 13 cards ...
  R1 --> G : round_finished  
  G --> R2 : _~_init~_~_([P1, P2, P4, P5], 12)
  ... play one Round with 12 cards ...
  R2 --> G : round_finished  
#+END_SRC

#+RESULTS:
[[file:doc/models_game_sequence_diagram.png]]

#+BEGIN_SRC plantuml :file doc/models_game_state_diagram.png
  hide empty description
  left to right direction
  [*] --> confirming : _~_init~_~_
  confirming --> playing : start_game
  playing --> paused_between_rounds : round_finished
  paused_between_rounds --> playing : start_next_round, number of cards\ncounts down to 1 then up again
  paused_between_rounds -> done : start_next_round when card\ncount is back to max
  done --> confirming : restart_with_same_players
  done --> [*]
#+END_SRC

#+RESULTS:
[[file:doc/models_game_state_diagram.png]]

The ~done~ → ~confirming~ transition is a convenience method: it
allows the organizer to restart the game without having to distribute
links to all Players again.  The ~restart_with_same_players~ method
shuffles the players.

**** Player
#+BEGIN_SRC plantuml :file doc/models_player_state_diagram.png
  left to right direction
  hide empty description
  state "not is_confirmed" as unconfirmed
  [*] --> unconfirmed : _~_init~_~_
  unconfirmed --> is_confirmed : confirm
  is_confirmed : name
  is_confirmed --> has_cards : accept_cards
  has_cards : cards
  has_cards : round
  has_cards --> has_bid : place_bid
  has_bid : bid
  has_bid --> has_bid : play_card
  has_bid --> has_cards : accept_cards\nwhen no cards\nleft
#+END_SRC

#+RESULTS:
[[file:doc/models_player_state_diagram.png]]

**** Round
A round is part of a game: in a round
1. Each player receives their cards,
2. Each player places their bid,
3. The players play their cards when it is their turn until no cards
   are left.

#+BEGIN_SRC plantuml :file doc/models_player_round_sequence_diagram.png
  actor Organizer as O
  actor "P 1" as A1
  actor "P 2" as A2
  participant "Player1" as P1
  participant "Player2" as P2
  participant Game as G
  participant Round as R
  G --> R : _~_init~_~_
  R --> P1 : accept_cards
  R --> P2 : accept_cards
  A1 --> P1 : place_bid
  P1 --> R : place_bid
  A2 --> P2 : place_bid
  P2 --> R : place_bid
  A1 --> P1 : play_card
  P1 --> R : play_card
  A2 --> P2 : play_card
  P2 --> R : play_card
  R --> P1 : add_trick
  R --> G : round_finished  
#+END_SRC

#+RESULTS:
[[file:doc/models_player_round_sequence_diagram.png]]

The ~Round~ only maintains the cards on the table of the current trick.

#+BEGIN_SRC plantuml :file doc/models_round_state_diagram.png
  hide empty description
  left to right direction
  [*] --> bidding : _~_init~_~_ with  //n//\nconfirmed players,\n//c// cards per player
  bidding --> bidding : //n - 1// times\nplace_bid
  bidding --> playing : //n//th time\nplace_bid
  playing --> playing : play_card\nno other\nmatch
  playing --> between_tricks : play_card\nall players\nhave same\ncard_count//>0//
  between_tricks --> playing : play_card,\nreset\ncurrent_trick
  playing --> done : play_card\nall players\nhave 0\ncards left
  done --> [*]
#+END_SRC

#+RESULTS:
[[file:doc/models_round_state_diagram.png]]

The ~between_tricks~ state allows Players to see which card the last
Player put on the table when the trick ended.

*** Controllers
**** Organizer
***** Set up a new game
***** Start the game
**** Player
***** Confirm the invitation
***** Place a bid
***** Play a card

* Credits
Card images by Adrian Kennard, aka, RevK Blog www.me.uk Twit
@TheRealRevK, downloaded from Wikipedia.

License
#+BEGIN_QUOTE
  I, the copyright holder of this work, hereby publish it under the
  following license: Creative Commons CC-Zero

  This file is made available under the Creative Commons CC0 1.0
  Universal Public Domain Dedication.  The person who associated a
  work with this deed has dedicated the work to the public domain by
  waiving all of their rights to the work worldwide under copyright
  law, including all related and neighboring rights, to the extent
  allowed by law. You can copy, modify, distribute and perform the
  work, even for commercial purposes, all without asking permission.
#+END_QUOTE
